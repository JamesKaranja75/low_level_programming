!<arch>
0-isupper.c/    0           0     0     644     218       `
#include "main.h"

/**
 * _isupper - checks for uppercase letters
 * @c: character to check
 *
 * Return: 1 if uppercase, 0 otherwise
 */
int _isupper(int c)
{
if (c >= 'A' && c <= 'Z')
return (1);
else
return (0);
}

0-memset.c/     0           0     0     644     317       `
#include "main.h"

/**
 * _memset - Fills memory with a constant byte
 * @s: Memory area to be filled
 * @b: Char to copy
 * @n: Number of times to copy b
 * Return: Pointer to the memory area s
 */
char *_memset(char *s, char b, unsigned int n)
{
unsigned int i;
for (i = 0; i < n; i++)
{
s[i] = b;
}
return (s);
}


0-strcat.c/     0           0     0     644     456       `
#include "main.h"

/**
 * _strcat - Concatenates two strings.
 * @dest: Pointer to the destination string.
 * @src: Pointer to the source string.
 * Return: Pointer to the destination string.
 */
char *_strcat(char *dest, char *src)
{
int length_of_dest = 0, z;

while (dest[length_of_dest] != '\0')
{
length_of_dest++;
}

for (z = 0; src[z] != '\0'; z++, length_of_dest++)
{
dest[length_of_dest] = src[z];
}

dest[length_of_dest] = '\0';
return (dest);
}
100-atoi.c/     0           0     0     644     361       `
#include "main.h"

/**
 * _atoi - Converts a string to an integer.
 * @s: The string to be converted.
 *
 * Return: The converted integer.
 */
int _atoi(char *s)
{
int i = 1;
unsigned int num = 0;
do {
if (*s == '-')
{
i *= -1;
}
else if (*s >= '0' && *s <= '9')
{
num = num * 10 + (*s - '0');
}
else if (num > 0)
{
break;
}
} while (*s++);
return (num *i);
}


1-isdigit.c/    0           0     0     644     238       `
#include "main.h"

/**
 * _isdigit - checks if a character is a digit (0 - 9)
 * @c: character to be checked
 *
 * Return: 1 if c is a digit, 0 otherwise
 */
int _isdigit(int c)
{
if (c >= '0' && c <= '9')
return (1);
else
return (0);
}

1-memcpy.c/     0           0     0     644     378       `
#include "main.h"

/**
 * _memcpy - Function that copies @n bytes from memory area @src
 * to memory area @dest
 * @dest: Memory area to copy to
 * @src: Memory area to copy from
 * @n: Number of bytes to copy
 * Return: A pointer to @dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
unsigned int i = 0;
while (i < n)
{
dest[i] = src[i];
i++;
}
return (dest);
}

1-strncat.c/    0           0     0     644     639       `
#include "main.h"

/**
 * _strncat - Concatenates two strings.
 * @dest: Pointer to the destination string.
 * @src: Pointer to the source string.
 * @n: Number of bytes to be concatenated.
 * Return: Pointer to destination string.
 */
char *_strncat(char *dest, char *src, int n)
{
int length_of_string = 0, z;
/* z is a counter for n bytes of src to be concatenated */
/* length_of_string = length of destination string */

while (dest[length_of_string] != '\0')
{
length_of_string++;
}

for (z = 0; z < n && src[z] != '\0'; z++, length_of_string++)
{
dest[length_of_string] = src[z];
}

dest[length_of_string] = '\0';
return (dest);
}


2-strchr.c/     0           0     0     644     349       `
#include "main.h"

/**
 * _strchr - Locates a character in a string
 * @s: The string to be searched
 * @c: The character to be located
 * Return: If c is found - a pointer to the first occurrence
 * if c is not found - NULL
 */
char *_strchr(char *s, char c)
{
int i = 0;
for (; s[i] >= '\0'; i++)
{
if (s[i] == c)
return (&s[i]);
}
return (0);
}


2-strlen.c/     0           0     0     644     255       `
#include "main.h"

/**
 * _strlen - Calculates the length of a string.
 * @s: The string to be checked.
 *
 * Return: The length of the string.
 */
int _strlen(char *s)
{
int str_length = 0;
while (s[str_length])
{
str_length++;
}
return (str_length);
}


2-strncpy.c/    0           0     0     644     513       `
#include "main.h"

/**
 * _strncpy - Copies a string.
 * @dest: Destination string pointer.
 * @src: Source string pointer.
 * @n: Number of bytes to be used.
 * Return: Pointer to destination string.
 */
char *_strncpy(char *dest, char *src, int n)
{
int count_of_bytes;

for (count_of_bytes = 0; count_of_bytes < n && src[count_of_bytes] != '\0';
count_of_bytes++)
{
dest[count_of_bytes] = src[count_of_bytes];
}

for (; count_of_bytes < n; count_of_bytes++)
{
dest[count_of_bytes] = '\0';
}

return (dest);
}


3-islower.c/    0           0     0     644     244       `
#include "main.h"

/**
 * _islower - Checks for lowercase character
 * @c: The character to be checked
 *
 * Return: 1 if the character is lowercase, 0 otherwise
 */
int _islower(int c)
{
if (c >= 97 && c <= 122)
{
return (1);
}
return (0);
}

3-puts.c/       0           0     0     644     226       `
#include "main.h"

/**
 * _puts - Prints a string followed by a new line.
 * @str: Pointer to the string.
 *
 * Return: None.
 */
void _puts(char *str)
{
int i = 0;
while (str[i])
{
_putchar(str[i]);
i++;
}
_putchar('\n');
}

3-strcmp.c/     0           0     0     644     501       `
#include "main.h"

/**
 * _strcmp - Compares two strings.
 * @s1: Pointer to the first string.
 * @s2: Pointer to the second string.
 * Return: Value less than 0 if s1 is less than s2,
 *         value greater than 0 if s1 is greater than s2,
 *         and 0 if strings are equal.
 */
int _strcmp(char *s1, char *s2)
{
int counter = 0;
int compare_value;

while (s1[counter] == s2[counter] && s1[counter] != '\0')
{
counter++;
}

compare_value = s1[counter] - s2[counter];
return (compare_value);
}


3-strspn.c/     0           0     0     644     493       `
#include "main.h"

/**
 * _strspn - Get the length of a prefix substring
 * @s: The string to be searched
 * @accept: The prefix to be measured
 * Return: The number of bytes in s which
 * consist only of bytes from accept
 */
unsigned int _strspn(char *s, char *accept)
{
unsigned int bytes = 0;
int index;

while (*s)
{
for (index = 0; accept[index]; index++)
{
if (*s == accept[index])
{
bytes++;
break;
}
else if (accept[index + 1] == '\0')
{
return (bytes);
}
}
s++;
}
return (bytes);
}


4-isalpha.c/    0           0     0     644     239       `
#include "main.h"

/**
 * _isalpha - Checks for alphabetic character
 * @c: The character to be checked
 *
 * Return: 1 if c is a letter, 0 otherwise
 */
int _isalpha(int c)
{
return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));
}



4-strpbrk.c/    0           0     0     644     438       `
#include "main.h"

/**
 * _strpbrk - Searches a string for any of a set of bytes
 * @s: The string to be searched
 * @accept: The set of bytes to be searched for
 * Return: If a set is matched - a pointer to the matched byte
 *         If no set is matched - NULL
 */
char *_strpbrk(char *s, char *accept)
{
int index;

while (*s)
{
for (index = 0; accept[index]; index++)
{
if (*s == accept[index])
return (s);
}
s++;
}
return ('\0');
}
5-strstr.c/     0           0     0     644     567       `
#include "main.h"

/**
 * _strstr - Locates a substring
 * @haystack: The string to be searched
 * @needle: The substring to be located
 * Return: If the substring is located - a pointer to the beginning
 *         If the substring is not located - NULL
 */
char *_strstr(char *haystack, char *needle)
{
int index;
if (*needle == '\0')
return (haystack);
while (*haystack)
{
index = 0;
if (haystack[index] == needle[index])
{
do {
if (needle[index + 1] == '\0')
return (haystack);
index++;
} while (haystack[index] == needle[index]);
}
haystack++;
}
return ('\0');
}

6-abs.c/        0           0     0     644     260       `
#include "main.h"

/**
 * _abs - Computes the absolute value of an integer
 * @c: The number to be computed
 *
 * Return: Absolute value of the number or zero
 */
int _abs(int c)
{
if (c < 0)
{
int abs_val;
abs_val = c * -1;
return (abs_val);
}
return (c);
}

9-strcpy.c/     0           0     0     644     438       `
#include "main.h"

/**
 * *_strcpy - Copies the string pointed to by src to dest.
 * @dest: Pointer to the destination char array.
 * @src: Pointer to the source char array.
 *
 * Description: Copies the string pointed to by pointer 'src'
 * to the buffer pointed to by 'dest'.
 *
 * Return: Pointer to 'dest'.
 */
char *_strcpy(char *dest, char *src)
{
int z = -1;
do {
z++;
dest[z] = src[z];
} while (src[z] != '\0');
return (dest);
}

main.c/         0           0     0     644     140       `
#include "main.h"

int main(void)
{
_puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
return (0);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

